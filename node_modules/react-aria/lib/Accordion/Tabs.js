'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _specialAssign = require('../special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  type: _react.PropTypes.oneOf(['menu', 'popover', 'modal', 'tooltip', 'alert', 'tabs', 'accordion']).isRequired,
  tag: _react.PropTypes.string,
  activeTabId: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  collapsible: _react.PropTypes.bool,
  accordion: _react.PropTypes.bool
};

var Manager = function (_Component) {
  _inherits(Manager, _Component);

  function Manager(props) {
    _classCallCheck(this, Manager);

    var _this = _possibleConstructorReturn(this, (Manager.__proto__ || Object.getPrototypeOf(Manager)).call(this, props));

    _this._addMember = function (member) {

      //////////////////////////
      if (member.type === 'tab') {
        if (activeTabId === id) {
          _this._activateTab(activeTabId, true, false);
        } else {
          _this._handleFirstTabSelection(id);
        }
      }
      //////////////////////
    };

    _this._addPanel = function (panel) {
      var activeTabId = _this.props.activeTabId;
      var controlledBy = panel.controlledBy;


      _this._panels.push(panel);

      if (activeTabId === controlledBy) {
        _this._activateTab(activeTabId, true, false);
      } else {
        _this._handleFirstTabSelection(panel.controlledBy);
      }
    };

    _this._focusTab = function (id) {
      var tabToFocus = _this._members.filter(function (tab) {
        return tab.id === id;
      });
      if (tabToFocus) {
        tabToFocus.node.focus();
      }
    };

    _this._activateTab = function (id, forceActivate) {
      var shouldChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var _this$props = _this.props;
      var type = _this$props.type;
      var onChange = _this$props.onChange;


      if (type === 'tabs') {
        if (id === _this._activeTabId && !forceActivate) {
          return;
        } else {
          _this._activeTabId = id;
        }
      }

      // shouldChange makes sure we don't fire callbacks when we don't need to
      if (shouldChange && typeof onChange === 'function') {
        onChange(id);

        // if onChange is being used we don't need to go any farther since the
        // user is now controlling state
        return;
      }

      for (var i = _this._members.length; i--;) {
        var tab = _this._members[i];
        if (type === 'accordion') {
          if (tab.id === id) {
            tab.toggleActiveState();
          }
        } else {
          tab.setActiveState(id === tab.id);
        }
      }
      for (var _i = _this._panels.length; _i--;) {
        var panel = _this._panels[_i];
        if (type === 'accordion') {
          if (panel.controlledBy === id) {
            panel.toggleActiveState();
          }
        } else {
          panel.setActiveState(id === panel.controlledBy);
        }
      }
    };

    _this._members = [];
    _this._panels = [];
    _this._activeTabId = props.activeTabId;
    return _this;
  }

  _createClass(Manager, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        ariaManager: {
          type: this.props.type,
          addMember: this._addMember,
          addPanel: this._addPanel,
          activateTab: this._activateTab
        }
      };
    }
  }, {
    key: '_handleTapOrHover',
    value: function _handleTapOrHover(e) {
      for (var i = this._members.length; i--;) {
        var member = this._members[i];
        if (member.node === target) {
          if (member.type === 'item') {
            this._onItemSelection(member, e);
          } else {
            this._activateTab(member.id);
          }
          return;
        }
      }
    }
  }, {
    key: '_handleFirstTabSelection',
    value: function _handleFirstTabSelection(id) {
      if (this.props.type === 'tabs' && !this._activeTabId || id === this._activeTabId) {
        this._activateTab(id, true, false);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var tag = _props.tag;
      var children = _props.children;

      var props = (0, _specialAssign2.default)({}, this.props, checkedProps);

      if (typeof children === 'function') {
        return children(this.state.isPopoverOpen);
      }

      return (0, _react.createElement)(tag, props, children);
    }
  }]);

  return Manager;
}(_react.Component);

Manager.childContextTypes = {
  ariaManager: _react.PropTypes.object.isRequired
};
Manager.propTypes = checkedProps;
Manager.defaultProps = {
  tag: 'div',
  collapsible: false
};
exports.default = Manager;
module.exports = exports['default'];