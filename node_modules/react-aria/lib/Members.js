'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _focusGroup = require('focus-group');

var _focusGroup2 = _interopRequireDefault(_focusGroup);

var _keys = require('./keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultOptions = {
  keybindings: {
    next: [{ keyCode: _keys2.default.arrowDown }, { keyCode: _keys2.default.arrowRight }],
    prev: [{ keyCode: _keys2.default.arrowUp }, { keyCode: _keys2.default.arrowLeft }],
    first: { keyCode: _keys2.default.home },
    last: { keyCode: _keys2.default.end }
  },
  wrap: true,
  stringSearch: true,
  stringSearchDelay: 600
};

var Members = function Members() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _classCallCheck(this, Members);

  this.add = function (member) {
    var id = member.id;
    var index = member.index;
    var node = member.node;
    var text = member.text;


    if (index === undefined) {
      _this.collection.push(member);
    } else {
      _this.collection.splice(index, 0, member);
    }

    _this.focusGroup.addMember({
      node: node,
      text: text || node.innerHTML
    });

    // activate focus trap if this was the first member added
    if (_this.collection.length === 1) {
      _this.focusGroup.activate();
    }

    if (typeof _this.options.onAdd === 'function') {
      _this.options.onAdd(member);
    }
  };

  this.remove = function (member) {
    var pos = _this.collection.indexOf(member);

    if (pos > -1) {
      _this.collection.splice(member, 1);
      _this.focusGroup.removeMember(member.node);
    }

    // deactivate focus trap if this was the last member removed
    if (_this.collection.length <= 0) {
      _this.focusGroup.activate();
    }

    if (typeof _this.options.onRemove === 'function') {
      _this.options.onRemove(member);
    }
  };

  this.focus = function (index) {
    _this.focusGroup.focusNodeAtIndex(index);
  };

  this.collection = [];
  this.options = _extends({}, defaultOptions, options);
  this.focusGroup = (0, _focusGroup2.default)(this.options);
};

exports.default = Members;
module.exports = exports['default'];