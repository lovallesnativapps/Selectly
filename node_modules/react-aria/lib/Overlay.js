'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _a11yFocusScope = require('a11y-focus-scope');

var _noScroll = require('no-scroll');

var _noScroll2 = _interopRequireDefault(_noScroll);

var _specialAssign = require('./utils/special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  tag: _react.PropTypes.string,
  role: _react.PropTypes.oneOf(['menu', 'popover', 'modal', 'tooltip', 'alert', 'listbox']),
  scopeFocus: _react.PropTypes.bool,
  returnFocus: _react.PropTypes.bool,
  freezeScroll: _react.PropTypes.bool,
  closeOnEscapeKey: _react.PropTypes.bool,
  closeOnOutsideClick: _react.PropTypes.bool,
  onRequestClose: _react.PropTypes.func,
  children: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.node])
};
var noop = function noop() {
  return null;
};

var Overlay = function (_Component) {
  _inherits(Overlay, _Component);

  function Overlay() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Overlay);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Overlay.__proto__ || Object.getPrototypeOf(Overlay)).call.apply(_ref, [this].concat(args))), _this), _this._handleDocumentKeyDown = function (_ref2) {
      var keyCode = _ref2.keyCode;

      if (keyCode === 27) {
        // Escape
        _this.props.onRequestClose();
      }
    }, _this._handleDocumentClick = function (e) {
      var node = (0, _reactDom.findDOMNode)(_this);
      if (node !== e.target && !node.contains(e.target) && _this._lastActiveElement !== e.target) {
        e.stopPropagation();
        _this.props.onRequestClose();
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Overlay, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._lastActiveElement = document.activeElement;

      if (this.props.scopeFocus) {
        (0, _a11yFocusScope.scopeFocus)((0, _reactDom.findDOMNode)(this));
      }

      if (this.props.freezeScroll) {
        _noScroll2.default.on();
      }

      this._registerEvents();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.scopeFocus) {
        (0, _a11yFocusScope.unscopeFocus)();
      }

      if (this.props.returnFocus) {
        this._lastActiveElement.focus();
      }

      if (this.props.freezeScroll) {
        _noScroll2.default.off();
      }

      this._unregisterEvents();
    }
  }, {
    key: '_registerEvents',
    value: function _registerEvents() {
      if (this.props.closeOnEscapeKey) {
        document.addEventListener('keydown', this._handleDocumentKeyDown, true);
      }

      if (this.props.closeOnOutsideClick) {
        document.addEventListener('click', this._handleDocumentClick, true);
      }
    }
  }, {
    key: '_unregisterEvents',
    value: function _unregisterEvents() {
      if (this.props.closeOnEscapeKey) {
        document.removeEventListener('keydown', this._handleDocumentKeyDown, true);
      }

      if (this.props.closeOnOutsideClick) {
        document.removeEventListener('click', this._handleDocumentClick, true);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var tag = _props.tag;
      var role = _props.role;
      var children = _props.children;

      var props = (0, _specialAssign2.default)({
        role: role
      }, this.props, checkedProps);

      if (typeof children === 'function') {
        return children(props);
      }

      return (0, _react.createElement)(tag, props, children);
    }
  }]);

  return Overlay;
}(_react.Component);

Overlay.propTypes = checkedProps;
Overlay.defaultProps = {
  tag: 'div',
  role: 'popover',
  returnFocus: true,
  closeOnEscapeKey: true,
  closeOnOutsideClick: true,
  onRequestClose: noop
};
exports.default = Overlay;
module.exports = exports['default'];