'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _focusTrap = require('focus-trap');

var _focusTrap2 = _interopRequireDefault(_focusTrap);

var _specialAssign = require('./special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  tag: _react.PropTypes.string,
  children: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.node]).isRequired
};

var AriaPopover = function (_Component) {
  _inherits(AriaPopover, _Component);

  function AriaPopover() {
    _classCallCheck(this, AriaPopover);

    return _possibleConstructorReturn(this, (AriaPopover.__proto__ || Object.getPrototypeOf(AriaPopover)).apply(this, arguments));
  }

  _createClass(AriaPopover, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _context$ariaManager = this.context.ariaManager;
      var trapFocus = _context$ariaManager.trapFocus;
      var initialFocus = _context$ariaManager.initialFocus;
      var onClickOutside = _context$ariaManager.onClickOutside;


      this._setPopoverNode();

      if (trapFocus) {
        this._focusTrap = (0, _focusTrap2.default)((0, _reactDom.findDOMNode)(this), {
          initialFocus: initialFocus,
          escapeDeactivates: false,
          clickOutsideDeactivates: true
        }).activate();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.context.ariaManager.trapFocus) {
        this._focusTrap.deactivate();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(lastProps, lastState, lastContext) {
      if (this.context.ariaManager.isPopoverOpen !== lastContext.ariaManager.isPopoverOpen) {
        this._setPopoverNode();
      }
    }
  }, {
    key: '_setPopoverNode',
    value: function _setPopoverNode() {
      this.context.ariaManager.setPopoverNode((0, _reactDom.findDOMNode)(this));
    }
  }, {
    key: 'render',
    value: function render() {
      var _context$ariaManager2 = this.context.ariaManager;
      var type = _context$ariaManager2.type;
      var uuid = _context$ariaManager2.uuid;
      var isPopoverOpen = _context$ariaManager2.isPopoverOpen;
      var _props = this.props;
      var tag = _props.tag;
      var children = _props.children;

      var componentProps = {
        'aria-hidden': !isPopoverOpen
      };

      if (type === 'menu') {
        componentProps['role'] = 'menu';
      } else if (type === 'modal') {
        componentProps['role'] = 'dialog';
      } else if (type === 'alert') {
        componentProps['role'] = 'alertdialog';
      } else if (type === 'tooltip') {
        componentProps['id'] = uuid;
        componentProps['role'] = 'tooltip';
      }

      if (type === 'popover') {
        componentProps['aria-labelledby'] = uuid;
      }

      var props = (0, _specialAssign2.default)(componentProps, this.props, checkedProps);

      if (typeof children === 'function') {
        return children(props);
      }

      return (0, _react.createElement)(tag, props, children);
    }
  }]);

  return AriaPopover;
}(_react.Component);

AriaPopover.contextTypes = {
  ariaManager: _react.PropTypes.object.isRequired
};
AriaPopover.propTypes = checkedProps;
AriaPopover.defaultProps = {
  tag: 'div'
};
exports.default = AriaPopover;
module.exports = exports['default'];