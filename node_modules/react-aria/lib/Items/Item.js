'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _uuid = require('../utils/uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _specialAssign = require('../utils/special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  component: _react.PropTypes.any,
  id: _react.PropTypes.string,
  role: _react.PropTypes.string,
  index: _react.PropTypes.number,
  text: _react.PropTypes.string,
  value: _react.PropTypes.any,
  onFocus: _react.PropTypes.func,
  onSelect: _react.PropTypes.func,
  children: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.node])
};
var noop = function noop() {
  return null;
};

var Item = function (_Component) {
  _inherits(Item, _Component);

  function Item() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Item);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Item.__proto__ || Object.getPrototypeOf(Item)).call.apply(_ref, [this].concat(args))), _this), _this._id = _this.props.id || (0, _uuid2.default)(), _this._handleMemberFocus = function (member, e) {
      if (_this._member.id === member.id) {
        _this.props.onFocus(member, e);
      }
    }, _this._handleMemberSelect = function (member, e) {
      if (_this._member.id === member.id) {
        _this.props.onSelect(member, e);
      }
    }, _this._handleClick = function (e) {
      _this.props.onSelect(_this._member, e);
      _this.context.itemList.onItemSelection(_this._member, e);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Item, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var focusGroup = this.context.itemList.focusGroup;
      var _props = this.props,
          index = _props.index,
          text = _props.text,
          value = _props.value;


      this._member = {
        id: this._id,
        node: (0, _reactDom.findDOMNode)(this),
        index: index,
        text: text,
        value: value
      };

      // add this item as a member
      focusGroup.addMember(this._member);

      // listen for respective focus group events
      focusGroup.on('focus', this._handleMemberFocus);
      focusGroup.on('select', this._handleMemberSelect);

      // activate focus group if this was the first member added
      if (focusGroup.getMembers().length === 1) {
        focusGroup.activate();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var focusGroup = this.context.itemList.focusGroup;


      focusGroup.removeMember(this._member);

      focusGroup.off('focus', this._handleMemberFocus);
      focusGroup.off('select', this._handleMemberSelect);

      // deactivate focus group if this was the last member removed
      if (focusGroup.getMembers().length <= 0) {
        focusGroup.deactivate();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          component = _props2.component,
          role = _props2.role,
          children = _props2.children;

      var props = (0, _specialAssign2.default)({
        role: role,
        id: this._id,
        tabIndex: -1,
        onClick: this._handleClick
      }, this.props, checkedProps);

      if (typeof children === 'function') {
        return children(props);
      }

      return (0, _react.createElement)(component, props, children);
    }
  }]);

  return Item;
}(_react.Component);

Item.contextTypes = {
  itemList: _react.PropTypes.object
};
Item.propTypes = checkedProps;
Item.defaultProps = {
  component: 'div',
  role: 'menuitem',
  onFocus: noop,
  onSelect: noop
};
exports.default = Item;
module.exports = exports['default'];