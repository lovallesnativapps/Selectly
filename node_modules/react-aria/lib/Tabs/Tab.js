'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _specialAssign = require('../utils/special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  component: _react.PropTypes.any,
  id: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
  isActive: _react.PropTypes.bool,
  children: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.node])
};

var Tab = function (_Component) {
  _inherits(Tab, _Component);

  function Tab() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tab);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tab.__proto__ || Object.getPrototypeOf(Tab)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isActive: false
    }, _this._setActiveState = function (isActive) {
      _this.setState({ isActive: isActive });
    }, _this._toggleActiveState = function () {
      _this.setState({ isActive: !_this.state.isActive });
    }, _this._handleClick = function (e) {
      var onClick = _this.props.onClick;


      _this.context.tabs.activateTab(_this.props.id);

      if (typeof onClick === 'function') {
        onClick(e);
      }
    }, _this._handleKeyDown = function (e) {
      var _this$props = _this.props,
          component = _this$props.component,
          id = _this$props.id,
          onKeyDown = _this$props.onKeyDown;


      if (component !== 'button' && ['Enter', ' '].indexOf(e.key) > -1) {
        e.preventDefault();
        _this.context.tabs.activateTab(id);
      }

      if (onKeyDown) {
        onKeyDown(e);
      }
    }, _this._handleFocus = function (e) {
      var onFocus = _this.props.onFocus;


      _this.context.tabs.activateTab(_this.props.id);

      if (typeof onFocus === 'function') {
        onFocus(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tab, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var tabs = this.context.tabs;
      var _props = this.props,
          id = _props.id,
          text = _props.text;


      this._member = {
        id: id,
        text: text,
        node: (0, _reactDom.findDOMNode)(this),
        setActiveState: this._setActiveState,
        toggleActiveState: this._toggleActiveState
      };

      tabs.focusGroup.addMember(this._member);

      if (id === tabs.activeTabId) {
        tabs.activateTab(id, true, false);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.context.tabs.focusGroup.removeMember(this._member);
    }
  }, {
    key: 'render',
    value: function render() {
      var accordion = this.context.tabs.accordion;
      var _props2 = this.props,
          component = _props2.component,
          id = _props2.id,
          disabled = _props2.disabled,
          children = _props2.children;

      var isActive = this.props.isActive !== undefined ? this.props.isActive : this.state.isActive;
      var componentProps = {
        id: id,
        role: 'tab',
        tabIndex: accordion ? 0 : isActive ? 0 : -1,
        'aria-selected': isActive,
        'aria-controls': id + '-panel',
        'aria-disabled': disabled
      };

      if (accordion) {
        componentProps['aria-expanded'] = isActive;
        componentProps['onClick'] = this._handleClick;
        componentProps['onKeyDown'] = this._handleKeyDown;
      } else {
        componentProps['onFocus'] = this._handleFocus;
      }

      var props = (0, _specialAssign2.default)(componentProps, this.props, checkedProps);

      if (typeof children === 'function') {
        return children(props, isActive);
      }

      return (0, _react.createElement)(component, props, children);
    }
  }]);

  return Tab;
}(_react.Component);

Tab.contextTypes = {
  tabs: _react.PropTypes.object.isRequired
};
Tab.propTypes = checkedProps;
Tab.defaultProps = {
  component: 'div'
};
exports.default = Tab;
module.exports = exports['default'];