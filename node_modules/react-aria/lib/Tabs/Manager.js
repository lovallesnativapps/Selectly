'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _FocusGroup = require('../utils/FocusGroup');

var _FocusGroup2 = _interopRequireDefault(_FocusGroup);

var _specialAssign = require('../utils/special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  component: _react.PropTypes.any,
  children: _react.PropTypes.node,
  activeTabId: _react.PropTypes.string,
  accordion: _react.PropTypes.bool,
  multiselect: _react.PropTypes.bool,
  onChange: _react.PropTypes.func
};

var Manager = function (_Component) {
  _inherits(Manager, _Component);

  function Manager(props) {
    _classCallCheck(this, Manager);

    var _this = _possibleConstructorReturn(this, (Manager.__proto__ || Object.getPrototypeOf(Manager)).call(this, props));

    _this._addPanel = function (panel) {
      var controlledBy = panel.controlledBy;


      _this._panels.push(panel);

      // set an active panel if there is one
      if (controlledBy === _this.props.activeTabId) {
        _this._activateTab(controlledBy, true, false);
      }
    };

    _this._activateTab = function (id, forceActivate) {
      var emitEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      // bail out if this is the same id
      if (id === _this.props.activeTabId && !forceActivate) return;

      var onChange = _this.props.onChange;


      if (emitEvent && typeof onChange === 'function') {
        onChange(id);
      } else {
        _this._setActiveStates(id);
      }
    };

    _this._focusGroup = new _FocusGroup2.default();
    _this._panels = [];
    return _this;
  }

  _createClass(Manager, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        tabs: {
          accordion: this.props.accordion,
          multiselect: this.props.multiselect,
          activeTabId: this.props.activeTabId,
          focusGroup: this._focusGroup,
          addPanel: this._addPanel,
          activateTab: this._activateTab,
          focusTab: this.focusTab
        }
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._focusGroup.activate();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._focusGroup.deactivate();
    }
  }, {
    key: '_setActiveStates',
    value: function _setActiveStates(id) {
      var _props = this.props,
          accordion = _props.accordion,
          multiselect = _props.multiselect;

      var collection = this._focusGroup.getMembers();

      for (var i = collection.length; i--;) {
        var tab = collection[i];
        if (accordion) {
          if (tab.id === id) {
            tab.toggleActiveState();
          } else if (!multiselect) {
            tab.setActiveState(false);
          }
        } else {
          tab.setActiveState(tab.id === id);
        }
      }

      for (var _i = this._panels.length; _i--;) {
        var panel = this._panels[_i];
        if (accordion) {
          if (panel.controlledBy === id) {
            panel.toggleActiveState();
          } else if (!multiselect) {
            panel.setActiveState(false);
          }
        } else {
          panel.setActiveState(panel.controlledBy === id);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          component = _props2.component,
          children = _props2.children;

      var props = (0, _specialAssign2.default)({}, this.props, checkedProps);
      return component ? (0, _react.createElement)(component, props, children) : children;
    }
  }]);

  return Manager;
}(_react.Component);

Manager.childContextTypes = {
  tabs: _react.PropTypes.object
};
Manager.propTypes = checkedProps;
Manager.defaultProps = {
  component: 'div'
};
exports.default = Manager;
module.exports = exports['default'];