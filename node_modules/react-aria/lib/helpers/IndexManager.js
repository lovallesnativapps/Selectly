'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var IndexManager = function () {
  function IndexManager(_ref) {
    var _ref$members = _ref.members;
    var members = _ref$members === undefined ? [] : _ref$members;
    var _ref$activeIndex = _ref.activeIndex;
    var activeIndex = _ref$activeIndex === undefined ? 0 : _ref$activeIndex;
    var _ref$faux = _ref.faux;
    var faux = _ref$faux === undefined ? false : _ref$faux;
    var _ref$wrap = _ref.wrap;
    var wrap = _ref$wrap === undefined ? true : _ref$wrap;
    var _ref$onChange = _ref.onChange;
    var onChange = _ref$onChange === undefined ? function () {
      return null;
    } : _ref$onChange;

    _classCallCheck(this, IndexManager);

    this._members = members;
    this._activeIndex = activeIndex;
    this._options = {
      faux: faux,
      wrap: wrap,
      onChange: onChange
    };
  }

  _createClass(IndexManager, [{
    key: 'addMember',
    value: function addMember(member, index) {
      if (index !== null && index !== undefined) {
        this._members.splice(index, 0, member);
      } else {
        this._members.push(member);
      }
    }
  }, {
    key: 'removeMember',
    value: function removeMember(member) {
      var indexToRemove = isNaN(member) ? this.getMemberIndex(member) : member;

      if (indexToRemove !== -1) {
        this._members.splice(indexToRemove, 1);
      }
    }
  }, {
    key: 'getMemberIndex',
    value: function getMemberIndex(member) {
      for (var i = 0; i < this._members.length; i++) {
        if (this._members[i].node === member) {
          return i;
        }
      }
      return -1;
    }
  }, {
    key: 'getActiveIndex',
    value: function getActiveIndex() {
      return this._options.faux ? this._activeIndex : this.getMemberIndex(document.activeElement);
    }
  }, {
    key: 'getActiveMember',
    value: function getActiveMember() {
      return this._members[this.getActiveIndex()];
    }
  }, {
    key: 'prev',
    value: function prev() {
      var activeIndex = this.getActiveIndex();
      var targetIndex = activeIndex;
      if (activeIndex > 0) {
        targetIndex = activeIndex - 1;
      } else if (this._options.wrap) {
        targetIndex = this._members.length - 1;
      }
      this.select(targetIndex);
    }
  }, {
    key: 'next',
    value: function next() {
      var activeIndex = this.getActiveIndex();
      var targetIndex = activeIndex;
      if (activeIndex < this._members.length - 1) {
        targetIndex = activeIndex + 1;
      } else if (this._options.wrap) {
        targetIndex = 0;
      }
      this.select(targetIndex);
    }
  }, {
    key: 'first',
    value: function first() {
      this.select(0);
    }
  }, {
    key: 'last',
    value: function last() {
      this.select(this._members.length - 1);
    }
  }, {
    key: 'select',
    value: function select(index) {
      var member = this._members[index];

      if (!member) {
        return;
      }
      if (member.node.focus) {
        member.node.focus();
      } else if (member.node.tagName.toLowerCase() === 'input') {
        member.node.select();
      }

      this._activeIndex = index;
      this._options.onChange(index);
    }
  }]);

  return IndexManager;
}();

exports.default = IndexManager;
module.exports = exports['default'];