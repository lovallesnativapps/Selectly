'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _IndexManager2 = require('./IndexManager');

var _IndexManager3 = _interopRequireDefault(_IndexManager2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FocusGroup = function (_IndexManager) {
  _inherits(FocusGroup, _IndexManager);

  function FocusGroup(_ref) {
    var _ref$root = _ref.root;
    var root = _ref$root === undefined ? document : _ref$root;

    var options = _objectWithoutProperties(_ref, ['root']);

    _classCallCheck(this, FocusGroup);

    var _this = _possibleConstructorReturn(this, (FocusGroup.__proto__ || Object.getPrototypeOf(FocusGroup)).call(this, options));

    _this._root = root;
    _this._handleKeydown = _this._handleKeydown.bind(_this);

    _this._options = _extends({
      onSelect: function onSelect() {
        return null;
      }
    }, _this._options, options, {
      faux: _this._root !== document
    });
    return _this;
  }

  _createClass(FocusGroup, [{
    key: 'activate',
    value: function activate() {
      this._root.addEventListener('keydown', this._handleKeydown, true);
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      this._root.removeEventListener('keydown', this._handleKeydown, true);
    }
  }, {
    key: 'focus',
    value: function focus(index) {
      this.select(index);
    }
  }, {
    key: 'selectFocusedMember',
    value: function selectFocusedMember() {
      this._options.onSelect(this.getActiveMember());
    }
  }, {
    key: '_handleKeydown',
    value: function _handleKeydown(e) {
      // only respond to keyboard events when
      // focus is already within the focus-group
      if (this.getActiveIndex() === -1) return;

      switch (e.key) {
        case 'ArrowLeft':
        case 'ArrowUp':
          e.preventDefault();
          this.prev();
          break;
        case 'ArrowRight':
        case 'ArrowDown':
          e.preventDefault();
          this.next();
          break;
        case 'Enter':
          this.selectFocusedMember();
          break;
      }
    }
  }]);

  return FocusGroup;
}(_IndexManager3.default);

exports.default = FocusGroup;
module.exports = exports['default'];