'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _specialAssign = require('../utils/special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  isOpen: _react.PropTypes.bool,
  children: _react.PropTypes.func
};

var Input = function (_Component) {
  _inherits(Input, _Component);

  function Input() {
    _classCallCheck(this, Input);

    return _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).apply(this, arguments));
  }

  _createClass(Input, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.context.select.setRootNode((0, _reactDom.findDOMNode)(this));
    }
  }, {
    key: '_getProps',
    value: function _getProps() {
      var select = this.context.select;
      var isOpen = this.props.isOpen;

      var props = {
        role: 'combobox',
        autoComplete: 'off',
        spellCheck: false,
        'aria-autocomplete': 'list',
        'aria-owns': select.uuid,
        'aria-haspopup': isOpen,
        'aria-expanded': isOpen,
        'aria-activedescendant': select.activeDescendant && select.activeDescendant.id
      };
      return (0, _specialAssign2.default)(props, this.props, checkedProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      var props = this._getProps();

      if (typeof children === 'function') {
        return children(props);
      }

      return (0, _react.createElement)('input', props);
    }
  }]);

  return Input;
}(_react.Component);

Input.contextTypes = {
  select: _react.PropTypes.object
};
Input.propTypes = checkedProps;
exports.default = Input;
module.exports = exports['default'];