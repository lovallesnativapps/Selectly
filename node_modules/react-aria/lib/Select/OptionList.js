'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Items = require('../Items');

var _Overlay = require('../Overlays/Overlay');

var _Overlay2 = _interopRequireDefault(_Overlay);

var _specialAssign = require('../utils/special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  component: _react.PropTypes.any,
  children: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.node]),
  initialFocus: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.bool]),
  closeOnOutsideClick: _react.PropTypes.bool,
  onOptionHighlight: _react.PropTypes.func,
  onOptionSelection: _react.PropTypes.func
};

var OptionList = function (_Component) {
  _inherits(OptionList, _Component);

  function OptionList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, OptionList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OptionList.__proto__ || Object.getPrototypeOf(OptionList)).call.apply(_ref, [this].concat(args))), _this), _this._handleItemFocus = function (item) {
      _this.context.select.setActiveDescendant(item);

      if (typeof _this.props.onOptionHighlight === 'function') {
        _this.props.onOptionHighlight(item);
      }
    }, _this.focusMember = function (index) {
      _this._itemList.focusMember(index);
    }, _this.getActiveMember = function () {
      return _this._itemList.getActiveMember();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(OptionList, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var select = this.context.select;
      var _props = this.props,
          component = _props.component,
          role = _props.role,
          scopeFocus = _props.scopeFocus,
          initialFocus = _props.initialFocus,
          onOptionSelection = _props.onOptionSelection,
          closeOnOutsideClick = _props.closeOnOutsideClick,
          children = _props.children;

      var props = (0, _specialAssign2.default)({
        component: component,
        role: 'listbox',
        id: select.uuid,
        closeOnOutsideClick: closeOnOutsideClick
      }, this.props, checkedProps);

      return _react2.default.createElement(
        _Items.ItemList,
        {
          ref: function ref(c) {
            return _this2._itemList = c;
          },
          component: false,
          rootNode: select.rootNode,
          scopeFocus: false,
          initialFocus: initialFocus,
          onItemFocus: this._handleItemFocus,
          onItemSelection: onOptionSelection
        },
        _react2.default.createElement(
          _Overlay2.default,
          props,
          children
        )
      );
    }
  }]);

  return OptionList;
}(_react.Component);

OptionList.contextTypes = {
  select: _react.PropTypes.object
};
OptionList.propTypes = checkedProps;
OptionList.defaultProps = {
  component: 'div',
  initialFocus: 0,
  closeOnOutsideClick: false
};
exports.default = OptionList;
module.exports = exports['default'];