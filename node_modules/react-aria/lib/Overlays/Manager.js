'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _uuid = require('../utils/uuid');

var _uuid2 = _interopRequireDefault(_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Manager = function (_Component) {
  _inherits(Manager, _Component);

  function Manager() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Manager);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Manager.__proto__ || Object.getPrototypeOf(Manager)).call.apply(_ref, [this].concat(args))), _this), _this._id = _this.props.id || (0, _uuid2.default)(), _this.state = {
      isOpen: false
    }, _this._setOverlay = function (component) {
      if (!_this._overlay) {
        _this._overlay = component;
      }
    }, _this._getOverlay = function (component) {
      return _this._overlay;
    }, _this.open = function () {
      _this.setState({ isOpen: true });
    }, _this.close = function () {
      _this.setState({ isOpen: false });
    }, _this.toggle = function () {
      _this.setState(function (state) {
        return { isOpen: !state.isOpen };
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Manager, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        overlayManager: {
          setOverlay: this._setOverlay,
          getOverlay: this._getOverlay,
          id: this._id,
          open: this.open,
          close: this.close,
          toggle: this.toggle,
          isOpen: this.state.isOpen
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          component = _props.component,
          children = _props.children,
          props = _objectWithoutProperties(_props, ['component', 'children']);

      if (typeof children === 'function') {
        return children(this.state.isOpen);
      }

      return component ? (0, _react.createElement)(component, props, children) : children;
    }
  }]);

  return Manager;
}(_react.Component);

Manager.childContextTypes = {
  overlayManager: _react.PropTypes.object
};
Manager.propTypes = {
  component: _react.PropTypes.any,
  children: _react.PropTypes.node
};
exports.default = Manager;
module.exports = exports['default'];