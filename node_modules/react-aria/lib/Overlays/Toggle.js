'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _specialAssign = require('../special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

var _stateManager = require('./state-manager');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  tag: _react.PropTypes.string,
  controls: _react.PropTypes.any.isRequired,
  isOpen: _react.PropTypes.bool.isRequired,
  on: _react.PropTypes.array
};

var Toggle = function (_Component) {
  _inherits(Toggle, _Component);

  function Toggle() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Toggle);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Toggle.__proto__ || Object.getPrototypeOf(Toggle)).call.apply(_ref, [this].concat(args))), _this), _this._handleKeyDown = function (e) {
      var _this$props = _this.props;
      var tag = _this$props.tag;
      var controls = _this$props.controls;
      var onKeyDown = _this$props.onKeyDown;

      // toggle the popover with keyboard controls

      if (['ArrowUp', 'ArrowDown'].indexOf(e.key) > -1 || tag !== 'button' && ['Enter', ' '].indexOf(e.key) > -1) {
        (0, _stateManager.togglePopover)(controls);
      }

      // call original prop if passed in
      if (typeof onKeyDown === 'function') {
        onKeyDown(e);
      }
    }, _this._handleClick = function (e) {
      var _this$props2 = _this.props;
      var controls = _this$props2.controls;
      var onClick = _this$props2.onClick;

      (0, _stateManager.togglePopover)(controls);
      if (typeof onClick === 'function') {
        onClick(e);
      }
    }, _this._handleMouseOver = function (e) {
      var _this$props3 = _this.props;
      var controls = _this$props3.controls;
      var onMouseOver = _this$props3.onMouseOver;

      (0, _stateManager.openPopover)(controls);
      if (typeof onMouseOver === 'function') {
        onMouseOver(e);
      }
    }, _this._handleMouseOut = function (e) {
      var _this$props4 = _this.props;
      var controls = _this$props4.controls;
      var onMouseOut = _this$props4.onMouseOut;

      (0, _stateManager.closePopover)(controls);
      if (typeof onMouseOut === 'function') {
        onMouseOut(e);
      }
    }, _this._handleFocus = function (e) {
      var _this$props5 = _this.props;
      var controls = _this$props5.controls;
      var onFocus = _this$props5.onFocus;

      (0, _stateManager.openPopover)(controls);
      if (typeof onFocus === 'function') {
        onFocus(e);
      }
    }, _this._handleBlur = function (e) {
      var _this$props6 = _this.props;
      var controls = _this$props6.controls;
      var onBlur = _this$props6.onBlur;

      (0, _stateManager.closePopover)(controls);
      if (typeof onBlur === 'function') {
        onBlur(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Toggle, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      (0, _stateManager.registerToggle)(this.props.controls, this);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      (0, _stateManager.unregisterToggle)(this.props.controls);
    }
  }, {
    key: '_getProps',
    value: function _getProps() {
      var _props = this.props;
      var type = _props.type;
      var controls = _props.controls;
      var on = _props.on;
      var isOpen = _props.isOpen;
      var disabled = _props.disabled;

      var props = {
        id: controls,
        role: 'button',
        tabIndex: disabled ? '' : 0,
        'aria-haspopup': true,
        'aria-expanded': isOpen,
        'aria-disabled': disabled,
        onKeyDown: this._handleKeyDown
      };

      if (type === 'popover') {
        props['id'] = controls;
      }
      if (type === 'tooltip') {
        props['aria-describedby'] = controls;
      }

      // apply "on" toggle events
      if (on.indexOf('click') > -1) {
        props.onClick = this._handleClick;
      }
      if (on.indexOf('hover') > -1) {
        props.onMouseOver = this._handleMouseOver;
        props.onMouseOut = this._handleMouseOut;
      }
      if (on.indexOf('focus') > -1) {
        props.onFocus = this._handleFocus;
        props.onBlur = this._handleBlur;
      }

      return (0, _specialAssign2.default)(props, this.props, checkedProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var tag = _props2.tag;
      var children = _props2.children;

      var props = this._getProps();

      if (typeof children === 'function') {
        return children(props);
      }

      return (0, _react.createElement)(tag, props, children);
    }
  }]);

  return Toggle;
}(_react.Component);

Toggle.propTypes = checkedProps;
Toggle.defaultProps = {
  tag: 'button',
  on: ['click']
};
exports.default = Toggle;
module.exports = exports['default'];