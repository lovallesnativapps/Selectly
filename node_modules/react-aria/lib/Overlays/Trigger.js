'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _upperCaseFirst = require('upper-case-first');

var _upperCaseFirst2 = _interopRequireDefault(_upperCaseFirst);

var _specialAssign = require('./utils/special-assign');

var _specialAssign2 = _interopRequireDefault(_specialAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkedProps = {
  tag: _react.PropTypes.string,
  overlayRole: _react.PropTypes.string,
  controls: _react.PropTypes.string,
  isOpen: _react.PropTypes.bool,
  keybindings: _react.PropTypes.array,
  triggerOn: _react.PropTypes.array,
  onTrigger: _react.PropTypes.func,
  children: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.node])
};

var Trigger = function (_Component) {
  _inherits(Trigger, _Component);

  function Trigger() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Trigger);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Trigger.__proto__ || Object.getPrototypeOf(Trigger)).call.apply(_ref, [this].concat(args))), _this), _this._isKeyDown = false, _this._handleKeyDown = function (e) {
      var _this$props = _this.props;
      var keybindings = _this$props.keybindings;
      var onKeyDown = _this$props.onKeyDown;


      _this._isKeyDown = true;

      if (keybindings.indexOf(e.key) > -1) {
        _this._trigger(e);
      }

      if (typeof onKeyDown === 'function') {
        onKeyDown(e);
      }
    }, _this._handleKeyUp = function (e) {
      // allow _handleEvent to check whether key was just down
      setTimeout(function () {
        _this._isKeyDown = false;
      });

      if (typeof _this.props.onKeyUp === 'function') {
        _this.props.onKeyUp(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Trigger, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.context.select) {
        this.context.select.setRootNode((0, _reactDom.findDOMNode)(this));
      }
    }
  }, {
    key: '_handleEvent',
    value: function _handleEvent(name, e) {
      var onEvent = this.props['on' + (0, _upperCaseFirst2.default)(name)];

      // don't allow button tag to trigger onClick
      if (this._isKeyDown) return;

      this._trigger(e);

      if (typeof onEvent === 'function') {
        onEvent(e);
      }
    }
  }, {
    key: '_trigger',
    value: function _trigger(e) {
      e.preventDefault();
      this.props.onTrigger(e);
    }
  }, {
    key: '_getProps',
    value: function _getProps() {
      var _props2;

      var _props = this.props;
      var tag = _props.tag;
      var disabled = _props.disabled;
      var overlayRole = _props.overlayRole;
      var controls = _props.controls;
      var isOpen = _props.isOpen;
      var triggerOn = _props.triggerOn;

      var props = (_props2 = {}, _defineProperty(_props2, tag === 'button' ? 'type' : 'role', 'button'), _defineProperty(_props2, 'tabIndex', disabled ? '' : 0), _defineProperty(_props2, 'aria-disabled', disabled), _defineProperty(_props2, 'onKeyDown', this._handleKeyDown), _defineProperty(_props2, 'onKeyUp', this._handleKeyUp), _props2);

      if (overlayRole !== 'modal') {
        props['aria-haspopup'] = true;
        props['aria-expanded'] = isOpen;
      }

      if (overlayRole === 'popover') {
        props['id'] = controls;
      } else if (overlayRole === 'tooltip') {
        props['aria-describedby'] = controls;
      }

      if (triggerOn.indexOf('click') > -1) {
        props.onClick = this._handleEvent.bind(this, 'click');
      }

      if (triggerOn.indexOf('hover') > -1) {
        props.onMouseOver = this._handleEvent.bind(this, 'mouseOver');
        props.onMouseOut = this._handleEvent.bind(this, 'mouseOut');
      }

      if (triggerOn.indexOf('focus') > -1) {
        props.onFocus = this._handleEvent.bind(this, 'focus');
        props.onBlur = this._handleEvent.bind(this, 'blur');
      }

      return (0, _specialAssign2.default)(props, this.props, checkedProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props;
      var tag = _props3.tag;
      var children = _props3.children;

      var props = this._getProps();

      if (typeof children === 'function') {
        return children(props);
      }

      return (0, _react.createElement)(tag, props, children);
    }
  }]);

  return Trigger;
}(_react.Component);

Trigger.contextTypes = {
  select: _react.PropTypes.object
};
Trigger.propTypes = checkedProps;
Trigger.defaultProps = {
  tag: 'button',
  overlayRole: 'popover',
  keybindings: [' ', 'ArrowUp', 'ArrowDown'],
  triggerOn: ['click'],
  onTrigger: function onTrigger() {
    return null;
  }
};
exports.default = Trigger;
module.exports = exports['default'];